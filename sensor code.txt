#include <SoftwareSerial.h>
 //#include <ESP8266WiFi.h>
 #include <Wire.h>  // This library is already built in to the Arduino IDE
#include <LiquidCrystal_I2C.h> //This library you can add via Include Library > Manage Library > 
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <ESP8266WiFi.h>
#include <WiFiClient.h> 
#include <ESP8266WebServer.h>
#include <ESP8266HTTPClient.h>

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
LiquidCrystal_I2C lcd(0x3f, 16, 2);    //0x27 old
String apiKey = "ADXQ6BAN1B1UBU5D";     //  Enter your Write API key from ThingSpeak

const char *ssid =  "BATCHB5";     // replace with your wifi ssid and wpa2 key
const char *pass =  "1234567890";
SoftwareSerial mySerial(D1, D2);
const char* mqtt_server = "demo.thingsboard.io"; //"52.66.130.151";
String payload = "{'latitude':'17.4408','longitude':'78.3941','Status':'Normal'}";
const char* mqtt_username = "Gp5csLyr8Nt6AL2Xe7f6";
const char* mqtt_password = "";
const char* publish_topic = "v1/devices/me/telemetry";
const char* subscribe_topic = "v1/devices/me/rpc/request/+";
#define rain D6 

const int trigPin = D4;
const int echoPin = D5;

int dist1=0,dist2=0,dist3=0,sts1=0;

long duration;
int distanceCm, distanceInch;
 
 unsigned char RTR,rcv,count,gchr='x',gchr1='x',robos='s';
 
 char pastnumber[11];
 char gpsval[50];
// char dataread[100] = "";
// char lt[15],ln[15];

WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50];
int value = 0;

int i=0,k=0;
int  gps_status=0;
float latitude=0; 
float logitude=0;                       
String Speed="";
String gpsString="";
char *test="$GPRMC";


int hbtc=0,hbtc1=0,rtr1=0;

unsigned char gv=0,msg1[10],msg2[11];
 float lati=0,longi=0;
unsigned int lati1=0,longi1=0;
unsigned char flat[5],flong[5];
 char finallat[8],finallong[9];


 int ii=0;
 
float tempc=0,weight=0;
float vout=0;


String inputString = "";         // a string to hold incoming data
boolean stringComplete = false;  // whether the string is complete

void callback(char* topic, byte* payload, unsigned int length) {
  int i,j;
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
  for(i=0;i<length;i++){
      // Switch on the LED if an 1 was received as first character
    if (strncmp((const char*)&payload[i], "fan ON",6)==0) {
      digitalWrite(LED_BUILTIN, LOW);   // Turn the LED on (Note that LOW is the voltage level
      Serial.println("LED ON");
      // but actually the LED is on; this is because
      // it is acive low on the ESP-01)
    }
   
  
    for(i=0;i<length;i++){
      // Switch on the LED if an 1 was received as first character
    if (strncmp((const char*)&payload[i], "fan OFF",6)==0) {
      digitalWrite(LED_BUILTIN, HIGH);   // Turn the LED on (Note that LOW is the voltage level
      Serial.println("LED OFF");
      // but actually the LED is on; this is because
      // it is acive low on the ESP-01)
    }

}
}
}
void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "JPW";
   // clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect((char*)clientId.c_str(),mqtt_username, mqtt_password)) {
      Serial.println(clientId);
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish(publish_topic, (char*)payload.c_str());
      // ... and resubscribe
      client.subscribe(subscribe_topic);
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void okcheck()
{
  unsigned char rcr;
  do{
      rcr = Serial.read();
    }while(rcr != 'K');
}

unsigned int ultra_dist()
{
   digitalWrite(trigPin, LOW);
   delayMicroseconds(2);
   digitalWrite(trigPin, HIGH);
   delayMicroseconds(10);
   digitalWrite(trigPin, LOW);
   duration = pulseIn(echoPin, HIGH);
   distanceCm= duration*0.034/2;
   //distanceInch = duration*0.0133/2;   
   //lcd.setCursor(2,0);
   //convertl(distanceCm);
   dist1 = distanceCm;
   return dist1;
}


void send_link()
 {
    Serial.write("AT+CMGS=\"");
    Serial.write(pastnumber);
    Serial.write("\"\r\n");  delay(2500);  
    Serial.write("https://www.google.co.in/search?client=opera&q=");
    for(ii=0;ii<=6;ii++){Serial.write(finallat[ii]);}
    Serial.write("%2C");
    for(ii=0;ii<=7;ii++){Serial.write(finallong[ii]);}
    Serial.write(0x1A);delay(4000);delay(4000);
  
      //delay(2000);
      
 }
 void msg_sms()
 {
   String l=finallat;
   String l1=finallong;
   Serial.println(l);
   Serial.println(l1);
   delay(2000);
   
           
            
 }
 

void setup() 
{
 // unsigned char rcr;
 Serial.begin(9600);//serialEvent();
mySerial.begin(9600);

    pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
    pinMode(echoPin, INPUT); // Sets the echoPin as an Input 

 Serial.println("Welcome");
 delay(1000);
  Serial.println("Connecting to ");
       Serial.println(ssid);
 
 
       WiFi.begin(ssid, pass);
 
      while (WiFi.status() != WL_CONNECTED) 
     {
        
            delay(500);
            Serial.print(".");
              
              delay(500);
     }
      Serial.println("");
      Serial.println("WiFi connected");    
  client.setServer(mqtt_server, 1883);
  Serial.println("HOST: "+String(mqtt_server));
  client.setCallback(callback);
//get_gps();
//gps_convert();
//



}

void loop() 
{
  String Status="";
 int sw_read=digitalRead(echoPin);
 if(sw_read==0)
 {
  Status="Panic_Occured";
  digitalWrite(trigPin,LOW);
  Serial.println("Panic Occured");
  } 
  else
  {
      Status="Normal";

      digitalWrite(trigPin,HIGH);
  Serial.println("Normal");
  } 
  
  
 Serial.println("Welcome");
//get_gps();
//gps_convert();


  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  long now = millis();
  if (now - lastMsg > 2000) {

          float h = 100;
      float t = 39;
      
         String l="17.186069";
   String l1="80.827423";    
                    
                             Serial.print("latitude: ");
                             Serial.print(l);
                             Serial.print("longitude ");
                             Serial.print(l1);
                             Serial.println("%. Send to thingsboard.");
                 payload = "{'latitude':'";
                 payload+=String(l);
                 payload+= "','longitude':'";
                 payload+=String(l1);
                 payload+= "','Status':'";
                 payload+=Status;
                 payload+= "'}";
                Serial.println(payload);
                delay(2000);
                 
    lastMsg = now;
    ++value;
    Serial.print("Publish message: ");
    Serial.println(payload);
    client.publish(publish_topic, (char*)payload.c_str());
  }
 /* delay(1500);
  //send_link();
send_sms();
    delay(1500);*/
}
/*
void serialEvent() {
  while (Serial.available()) {
    // get the new byte:
    char inChar = (char)Serial.read();
    // add it to the inputString:
    inputString += inChar;
    // if the incoming character is a newline, set a flag so the main loop can
    // do something about it:
    if (inChar == '\n') {
      stringComplete = true;
    }
  }
}*/


void serialEvent() 
{
  while (Serial.available()) 
        {
         
         char inChar = (char)Serial.read();
           if(inChar == '*')
             {
             // gchr = Serial.read();              
             gchr = 's';
             }
                 
        }
}




/*
void serialEvent() 
{
  while (Serial.available()) 
        {
         
         char inChar = (char)Serial.read();
           if(inChar == '*')
             {
              gchr = Serial.read();
             }
           if(inChar == '#')
             {
              gchr1 = Serial.read();
             }        
        }
}*/


int readSerial(char result[]) 
{
  int i = 0;
  while (1) 
  {
    while (Serial.available() > 0) 
    {
      char inChar = Serial.read();
      if (inChar == '\n') 
         {
          result[i] = '\0';
          Serial.flush();
          return 0;
         }
      if (inChar != '\r') 
         {
          result[i] = inChar;
          i++;
         }
    }
  }
}


int readSerial1(char result[]) 
{
  int i = 0;
  while (1) 
  {
    while (Serial.available() > 0) 
    {
      char inChar = Serial.read();
      if (inChar == '*') 
         {
          result[i] = '\0';
          Serial.flush();
          return 0;
         }
      if (inChar != '*') 
         {
          result[i] = inChar;
          i++;
         }
    }
  }
}




void gpsEvent()
{
  gpsString="";
  while(1)
  {
   //while (gps.available()>0)            //Serial incoming data from GPS

    while (mySerial.available() > 0)
   {
    //char inChar = (char)gps.read();
    char inChar = (char)mySerial.read();
     gpsString+= inChar;                    //store incoming data from GPS to temparary string str[]
     i++;
    // Serial.print(inChar);
     if (i < 7)                      
     {
      if(gpsString[i-1] != test[i-1])         //check for right string
      {
        i=0;
        gpsString="";
      }
     }
    if(inChar=='\r')
    {
     if(i>60)
     {
       gps_status=1;
       break;
     }
     else
     {
       i=0;
     }
    }
  }
   if(gps_status)
    break;
  }
}

void get_gps()
{
  
   gps_status=0;
   int x=0;
   while(gps_status==0)
   {
    gpsEvent();
    int str_lenth=i;
    coordinate2dec();
    i=0;x=0;
    str_lenth=0;
   }
}

void coordinate2dec()
{
  String lat_degree="";
    for(i=19;i<=20;i++)         
      lat_degree+=gpsString[i];
      
  String lat_minut="";
     for(i=21;i<=22;i++)         
      lat_minut+=gpsString[i];
     for(i=24;i<=25;i++)         
      lat_minut+=gpsString[i];


       
  String log_degree="";
    for(i=32;i<=34;i++)
      log_degree+=gpsString[i];
  String log_minut="";
    for(i=35;i<=36;i++)
      log_minut+=gpsString[i];
    for(i=38;i<=39;i++)
      log_minut+=gpsString[i];

      
    Speed="";
    for(i=45;i<48;i++)          //extract longitude from string
      Speed+=gpsString[i];
      
     float minut= lat_minut.toFloat();
     minut=minut/60;
     float degree=lat_degree.toFloat();
     latitude=degree+minut;
     
     minut= log_minut.toFloat();
     minut=minut/60;
     degree=log_degree.toFloat();
     logitude=degree+minut;
}

void gps_convert()
{
  if(gps_status)
  {
  Serial.println(gpsString);

  if(gpsString[0] == '$' && gpsString[1] == 'G' && gpsString[2] == 'P' && gpsString[3] == 'R' && gpsString[4] == 'M' && gpsString[5] == 'C')
    {
     // Serial.println("Don11111111111111111111111111111111111111111111111111111\r\n");      
    //  Serial.write(gpsString[18]);Serial.write(gpsString[19]);Serial.write(gpsString[20]);Serial.write(gpsString[21]);Serial.write(gpsString[22]);
     //lcd.setCursor(0,0);
     for(ii=0;ii<9;ii++)
       {
        //lcd.write(gpsString[19+ii]);    
        msg1[ii] = gpsString[19+ii];
        //Serial.write(msg1[ii]);
       }
       //Serial.println("\r\n");
     //lcd.setCursor(0,1);
      for(ii=0;ii<10;ii++)
       {
        //lcd.write(gpsString[32+ii]);
        msg2[ii] = gpsString[32+ii];    
       // Serial.write(msg2[ii]);
       }

// Serial.println(msg1);
// Serial.println(msg2);

       //lati = (((msg1[2]-48)*100000) +((msg1[3]-48)*10000) + ((msg1[5]-48)*1000) + ((msg1[6]-48)*100) + ((msg1[7]-48)*10) + (msg1[8]-48)); 
       //longi = (((msg2[3]-48)*100000) + ((msg2[4]-48)*10000) + ((msg2[6]-48)*1000) + ((msg2[7]-48)*100) + ((msg2[8]-48)*10) + (msg2[9]-48));

       lati = (((msg1[2]-48)*1000) + ((msg1[3]-48)*100) + ((msg1[5]-48)*10) + (msg1[6]-48)); 
       longi = (((msg2[3]-48)*1000) + ((msg2[4]-48)*100) + ((msg2[6]-48)*10) + (msg2[7]-48));

      // converts(lati);Serial.write("-");
      // converts(longi);Serial.write("\r\n");
       
       lati = (lati/60);  longi = (longi/60);

       lati = (lati*100); longi = (longi*100);
       lati1 = lati;      longi1 = longi;
       
// Serial.write("After ");
  //      converts(lati1);Serial.write("-");
    //   converts(longi1);Serial.write("\r\n");
 

              convlat(lati); convlong(longi);
        finallat[0] = msg1[0];
        finallat[1] = msg1[1];
        finallat[2] = '.';
        finallat[3] = flat[0]; finallat[4] = flat[1];finallat[5] = flat[2];finallat[6] = flat[3];finallat[7] = '\0';


        finallong[0] = msg2[0];
        finallong[1] = msg2[1];
        finallong[2] = msg2[2];
        finallong[3] = '.';
        finallong[4] = flong[0];finallong[5] = flong[1];finallong[6] = flong[2];finallong[7] = flong[3];finallong[8] = '\0'; 

   
    }
  }  
}

 void convlat(unsigned int value)  
      {
             unsigned int a,b,c,d,e,f,g,h;

      a=value/10000;
      b=value%10000;
      c=b/1000;
      d=b%1000;
      e=d/100;
      f=d%100;
      g=f/10;
      h=f%10;


      a=a|0x30;              
      c=c|0x30;
      e=e|0x30; 
    g=g|0x30;              
      h=h|0x30;
   
  // dlcd(a);
//   dlcd(c);dlcd(e); dlcd(g);dlcd(h);//lcddata('A');//lcddata(' ');lcddata(' ');
    
         
               flat[0] = c;
               flat[1] = e;
               flat[2] = g;
             flat[3] = h;


          }

 void convlong(unsigned int value)  
      {
            unsigned int a,b,c,d,e,f,g,h;

      a=value/10000;
      b=value%10000;
      c=b/1000;
      d=b%1000;
      e=d/100;
      f=d%100;
      g=f/10;
      h=f%10;


      a=a|0x30;              
      c=c|0x30;
      e=e|0x30; 
    g=g|0x30;              
      h=h|0x30;
   
  // dlcd(a);
//   dlcd(c);dlcd(e); dlcd(g);dlcd(h);//lcddata('A');//lcddata(' ');lcddata(' ');
    
         
               flong[0] = c;
               flong[1] = e;
               flong[2] = g;
             flong[3] = h;


          }


/*
void coordinate2dec()
{
  String lat_degree="";
    for(i=20;i<=21;i++)         
      lat_degree+=gpsString[i];
      
  String lat_minut="";
     for(i=22;i<=28;i++)         
      lat_minut+=gpsString[i];
  String log_degree="";
    for(i=32;i<=34;i++)
      log_degree+=gpsString[i];
  String log_minut="";
    for(i=35;i<=41;i++)
      log_minut+=gpsString[i];
    
    Speed="";
    for(i=45;i<48;i++)          //extract longitude from string
      Speed+=gpsString[i];
      
     float minut= lat_minut.toFloat();
     minut=minut/60;
     float degree=lat_degree.toFloat();
     latitude=degree+minut;
     
     minut= log_minut.toFloat();
     minut=minut/60;
     degree=log_degree.toFloat();
     logitude=degree+minut;
}*/

void gsminit()
{
  Serial.write("AT\r\n");                   okcheck();
  Serial.write("ATE0\r\n");                 okcheck();
  Serial.write("AT+CMGF=1\r\n");            okcheck();
  Serial.write("AT+CNMI=1,2,0,0\r\n");      okcheck();
  Serial.write("AT+CSMP=17,167,0,0\r\n");   okcheck();
    
   
  do{
     rcv = Serial.read();
    }while(rcv != '*');
     readSerial(pastnumber);
     pastnumber[10]='\0';
     
  

    Serial.write("AT+CMGS=\"");
    Serial.write(pastnumber);
    Serial.write("\"\r\n"); delay(3000);
    Serial.write("Mobile no. registered\r\n");
    Serial.write(0x1A);    
    //pastnumber[10]='\0';
    delay(4000);  delay(4000);  
    
    
  //delay(1000);
}


/*
int gpsgain(char result[]) 
{
  int i = 0;
  char rcvv;
  
  while (1) 
  {
    while (Serial.available() > 0) 
    {   
      lp:
      char inChar = Serial.read();
      result[i] = inChar;
      if(result[0] == '$')
        {
          i++;
       //   result[i] = inChar;
        }
      if(result[0] != '$')
        {
          i=0; 
        }
      if(i == 5)
        {
         if(result[0] == '$' && result[1] == 'G' && result[2] == 'P' && result[3] == 'R' && result[4] == 'M' && result[5] == 'C')
           {
             goto lp;   
           }
         else
           {
            i=0;  
           }
        }
      if(i == 46)
        {
            result[47] = '\0';
            Serial.flush();
            
            lt[0]=result[21];lt[1]=result[22];lt[2]=result[23];lt[3]=result[24];lt[4]=result[25];lt[5]=result[26];
            lt[6]=result[27];lt[7]=result[28];lt[8]=result[29];lt[9]=result[30];lt[10]=result[31];lt[11]='\0';

            ln[0]=result[33];ln[1]=result[34];ln[2]=result[35];ln[3]=result[36];ln[4]=result[37];ln[5]=result[38];
            ln[6]=result[39];ln[7]=result[40];ln[8]=result[41];ln[9]=result[42];ln[10]=result[43];ln[11]=result[44];ln[12]='\0';
            
            return 0;
        }
    }
  }
}
*/

/*
void keypad()
{
   char kn=0,valk=0;

   lcd.setCursor(0,1);
   
  while(1)
  {
    if(digitalRead(swi) == LOW)
      {delay(1000);
       while(digitalRead(swi) == LOW);
         valk++;
         if(valk >= 9)
           {
            valk=9;
           }
           lcd.setCursor(kn,1);  convertk(valk);
      }
    if(digitalRead(swd) == LOW)
      {delay(1000);
       while(digitalRead(swd) == LOW);
         valk--;
         if(valk <= 0)
           {
            valk=0;
           }
           lcd.setCursor(kn,1);  convertk(valk);
      }
    if(digitalRead(swe) == LOW)
      {delay(1000);
       while(digitalRead(swe) == LOW);
        
        password[kn] = (valk+48);
         kn++;      
          
         lcd.setCursor(kn,1);
            valk=0;
         if(kn == 4)
           {kn=0;
            break;
           }
       
      }      
  }
}
*/
void converts(unsigned int value)
{
  unsigned int a,b,c,d,e,f,g,h;

      a=value/10000;
      b=value%10000;
      c=b/1000;
      d=b%1000;
      e=d/100;
      f=d%100;
      g=f/10;
      h=f%10;


      a=a|0x30;               
      c=c|0x30;
      e=e|0x30; 
      g=g|0x30;              
      h=h|0x30;
    
     
   Serial.write(a);
   Serial.write(c);
   Serial.write(e); 
   Serial.write(g);
   Serial.write(h);
}

void convertl(unsigned int value)
{
  unsigned int a,b,c,d,e,f,g,h;

      a=value/10000;
      b=value%10000;
      c=b/1000;
      d=b%1000;
      e=d/100;
      f=d%100;
      g=f/10;
      h=f%10;


      a=a|0x30;               
      c=c|0x30;
      e=e|0x30; 
      g=g|0x30;              
      h=h|0x30;
    
     
//   lcd.write(a);
//   lcd.write(c);
//   lcd.write(e); 
//   lcd.write(g);
//   lcd.write(h);
}

void convertk(unsigned int value)
{
  unsigned int a,b,c,d,e,f,g,h;

      a=value/10000;
      b=value%10000;
      c=b/1000;
      d=b%1000;
      e=d/100;
      f=d%100;
      g=f/10;
      h=f%10;


      a=a|0x30;               
      c=c|0x30;
      e=e|0x30; 
      g=g|0x30;              
      h=h|0x30;
    
     
  // lcd.write(a);
  // lcd.write(c);
  // lcd.write(e); 
  // lcd.write(g);
   //lcd.write(h);
}
/*
   sensorValue = analogRead(analogInPin);
   sensorValue = (sensorValue/9.31);
   lcd.setCursor(1,1); //rc
   lcd.print(sensorValue);
   Serial.print(sensorValue);
 *